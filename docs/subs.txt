int lavgim(DIFFIMAGE *imdiff)
int lavgr(LAT3D *lat)
int lavgrf(DIFFIMAGE *imdiff1)
  for(radius = 0; radius < imdiff1->rfile_length; radius++) {
int lavgrim(DIFFIMAGE *imdiff)
int lavgrlt(LAT3D *lat)
int lavgsqim(DIFFIMAGE *imdiff)
int lavsqrim(DIFFIMAGE *imdiff)
int lavsqrlt(LAT3D *lat)
int lbuttim(DIFFIMAGE *imdiff)
int lchbyte(void *ptr, size_t packet_size, size_t list_length)
int lconstim(DIFFIMAGE *imdiff)
int lconstlt(LAT3D *lat)
int lconstrf(DIFFIMAGE *imdiff)
int lculllt(LAT3D *lat)
int lcutim(DIFFIMAGE *imdiff)
int ldf2im(DIFFIMAGE *imdiff)
int ldfrflt(LAT3D *lat1, LAT3D *lat2)
int ldfsqrlt(LAT3D *lat1, LAT3D *lat2)
int ldivlt(LAT3D *lat1, LAT3D *lat2)
int ldivrf(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
  for(radius = 0; radius < imdiff1->rfile_length; radius++) {
    if (imdiff1->rfile[radius] != imdiff1->rfile_mask_tag) {
int lexplt(LAT3D *lat)
#define SWAP(a,b) tempr=(a);(a)=(b);(b)=tempr
void lfft(float *data,int *nn,int ndim,int isign)
	for (idim=1;idim<=ndim;idim++)
int lfreeim(DIFFIMAGE *imdiff)
int lfreelt(LAT3D *lat)
  free((LATTICE_DATA_TYPE *)lat->lattice);
  free((LAT3D *)lat);
  free((RFILE_DATA_TYPE *)lat->rfile);
  return(return_value);
int lgausslt(LAT3D *lat)
int lgensv(DIFFIMAGE *imdiff)
int lgetanls(DIFFIMAGE *imdiff)
int lgetmat(DIFFIMAGE *imdiff)
		structure, imdiff->(*overload).
int lgetovld(DIFFIMAGE *imdiff)
int lgetpks(DIFFIMAGE *imdiff)
DIFFIMAGE *linitim(void)
LAT3D *linitlt(void) 
  lat = (LAT3D *)malloc(sizeof(LAT3D));
  if (!lat) {
int lintdfim(DIFFIMAGE *imdiff)
int lmedim(DIFFIMAGE *imdiff) 
size_t lmin(size_t arg1, size_t arg2)
  if (arg1 > arg2) {
  return(return_value);
int lminr(LAT3D *lat)
int lminrim(DIFFIMAGE *imdiff)
   image of specified size (1024 x 1024 default).
int lmodeim(DIFFIMAGE *imdiff) 
int lmulim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
int lmullt(LAT3D *lat1, LAT3D *lat2)
int lmulrf(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
  for(radius = 0; radius < imdiff1->rfile_length; radius++) {
    if (imdiff1->rfile[radius] != imdiff1->rfile_mask_tag) {
int lmulrfim(DIFFIMAGE *imdiff)
int lmulsclt(LAT3D *lat)
  for(k = 0; k < lat->zvoxels; k++) {
int lnign(DIFFIMAGE *imdiff)
int lnoiseim(DIFFIMAGE *imdiff)
int lnormim(DIFFIMAGE *imdiff)
int lpeakim(DIFFIMAGE *imdiff)
int lpolarim(DIFFIMAGE *imdiff)
int lpunch(DIFFIMAGE *imdiff)
  for (i=0; i<imdiff->mask_count; i++) {
int lpunchim(DIFFIMAGE *imdiff)
int lratioim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
int lreaddf(DIFFIMAGE *imdiff)
int lreadim(DIFFIMAGE *imdiff)
int lreadlt(LAT3D *lat)
int lreadrf(DIFFIMAGE *imdiff)
  while ((num_read = fread(&imdiff->rfile[i],sizeof(RFILE_DATA_TYPE), 1,
int lrf2lt(LAT3D *lat)
   image of specified size (1024 x 1024 default).
int lrmpkim(DIFFIMAGE *imdiff)
int lscaleim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
int lscalelt(LAT3D *lat1, LAT3D *lat2)
int lshim4lt(LAT3D *lat)
int lshimlt(LAT3D *lat)
int lsmthim(DIFFIMAGE *imdiff) 
int lsolidlt(LAT3D *lat)
int lsubim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
int lsublt(LAT3D *lat1, LAT3D *lat2)
int lsubrf(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
  for(radius = 0; radius < imdiff1->rfile_length; radius++) {
    if (imdiff1->rfile[radius] != imdiff1->rfile_mask_tag) {
/* LSUBRFIM.C - Subtract I(r) from a diffraction image.
int lsubrfim(DIFFIMAGE *imdiff)
int lsubrflt(LAT3D *lat)
int lsumim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
int lsumlt(LAT3D *lat1, LAT3D *lat2)
int lsumrf(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
  for(radius = 0; radius < imdiff1->rfile_length; radius++) {
    if (imdiff1->rfile[radius] != imdiff1->rfile_mask_tag) {
struct ijkcoords lijksub(struct ijkcoords vec1, struct ijkcoords vec2)
int ltagim(DIFFIMAGE *imdiff)
  for(index=0; index < imdiff->image_length; index++) {
    if (imdiff->image[index] == imdiff->mask_tag) {
int ltaglt(LAT3D *lat)
int lthrshim(DIFFIMAGE *imdiff)
  for(index=0; index < imdiff->image_length; index++) {
		rather than by (x,y).
int ltordata(DIFFIMAGE *imdiff)
int lupdbd(LAT3D *lat)
	if (lat->map3D->pos.x > lat->xbound.max) lat->xbound.max = lat->map3D->pos.x;
	if (lat->map3D->pos.x < lat->xbound.min) lat->xbound.min = lat->map3D->pos.x;
	if (lat->map3D->pos.y > lat->ybound.max) lat->ybound.max = lat->map3D->pos.y;
	if (lat->map3D->pos.y < lat->ybound.min) lat->ybound.min = lat->map3D->pos.y;
	if (lat->map3D->pos.z > lat->zbound.max) lat->zbound.max = lat->map3D->pos.z;
	if (lat->map3D->pos.z < lat->zbound.min) lat->zbound.min = lat->map3D->pos.z;
int lwaveim(DIFFIMAGE *imdiff)
int lwindim(DIFFIMAGE *imdiff)
int lwritedf(DIFFIMAGE *imdiff)
int lwriteim(DIFFIMAGE *imdiff)
int lwritelt(LAT3D *lat)
int lwriterf(DIFFIMAGE *imdiff)
  num_wrote = fwrite(imdiff->rfile, sizeof(RFILE_DATA_TYPE),
int lwritesh(LAT3D *lat)
	 of first image (imdiff1->rfile).
int lxavgr(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
	 of first image (imdiff1->rfile).
int lxavgrim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
int lxf1lt(LAT3D *lat)
int lxfmask(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
