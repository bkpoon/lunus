==> lavgim.c <==
/* LAVGIM.C - Calculate the average intensity for an input image.
   
   Author: Mike Wall   
   Date: 1/11/95
   Version: 1.
   
*/

#include<mwmask.h>

int lavgim(DIFFIMAGE *imdiff)
{
	size_t
		r,
		c,
		n=0,
		index = 0;

	struct rccoords rvec;


==> lavgr.c <==
/* LAVGR.C - Generate a table of average voxel values as a function of radius
		for an input 3D lattice.
   
   Author: Mike Wall
   Date: 3/28/93
   Version: 1.

*/

#include<mwmask.h>

int lavgr(LAT3D *lat)
{
	size_t
		*n,
		i,
		j,
		k,
		r,
		index = 0;

==> lavgrf.c <==
/* LAVGRF.C - Average the values of an rfile.
   
   Author: Mike Wall
   Date: 1/12/95
   Version: 1.
   
*/

#include<mwmask.h>

int lavgrf(DIFFIMAGE *imdiff1)
{
  size_t
    radius,
    n=0;
  
  int
    return_value = 0;
  
  for(radius = 0; radius < imdiff1->rfile_length; radius++) {

==> lavgrim.c <==
/* LAVGRIM.C - Calculate the average intensity vs. radius for an
		input image.
   
   Author: Mike Wall   
   Date: 4/3/93
   Version: 1.
   
   */

#include<mwmask.h>

int lavgrim(DIFFIMAGE *imdiff)
{
	size_t
		r,
		c,
		*n,
		radius,
		index = 0;


==> lavgrlt.c <==
/* LAVGRLT.C - Calculate the average voxel value vs. radius for an 
              input lattice
   
   Author: Mike Wall
   Date: 3/1/95
   Version: 1.
   
   */

#include<mwmask.h>

int lavgrlt(LAT3D *lat)
{
  size_t
    *ct,
    i,
    j,
    k,
    r,
    index = 0;

==> lavgsqim.c <==
/* LAVGSQIM.C - Calculate the average squared pixel value for an input image.
   
   Author: Mike Wall   
   Date: 1/23/95
   Version: 1.
   
   */

#include<mwmask.h>

int lavgsqim(DIFFIMAGE *imdiff)
{
	size_t
		r,
		c,
		n=0,
		index = 0;

	struct rccoords rvec;


==> lavsqrim.c <==
/* LAVSQRIM.C - Calculate the average intensity squared as a function of 
	radius for a diffraction image.

   Author: Mike Wall
   Version:1.0
   Date:4/7/94
	
*/

#include<mwmask.h>

int lavsqrim(DIFFIMAGE *imdiff)
{
	RCCOORDS_DATA
		r,
		c;
	size_t
		*n,
		radius,
		index = 0;

==> lavsqrlt.c <==
/* LAVSQRLT.C - Calculate the average square voxel value vs. radius for an 
              input lattice
   
   Author: Mike Wall
   Date: 3/15/95
   Version: 1.
   
   */

#include<mwmask.h>

int lavsqrlt(LAT3D *lat)
{
  size_t
    *ct,
    i,
    j,
    k,
    r,
    index = 0;

==> lbuttim.c <==
/* LBUTTIM.C - Mask a diffraction image using a butterfly shape.
   
   Author: Mike Wall
   Date: 6/22/94
   Version: 1.
   
   */

#include<mwmask.h>

int lbuttim(DIFFIMAGE *imdiff)
{
  size_t 
    index = 0;
  
  RCCOORDS_DATA
    r,
    c;
  
  struct xycoords

==> lchbyte.c <==
/* LCHBYTE.C - Reverse the byte order of a number.
   
   Author: Mike Wall
   Date: 6/22/94
   Version: 1.
   
   */

#include<mwmask.h>

int lchbyte(void *ptr, size_t packet_size, size_t list_length)
{
	size_t 
		i,
		j;
	char 
		*char_list,
		*packet,
		*temp_packet;


==> lconstim.c <==
/* LCONSTIM - Create an image with constant pixel value based on an input
		image format.
   
   Author: Mike Wall
   Date: 4/18/94
   Version: 1.
   
   */

#include<mwmask.h>

int lconstim(DIFFIMAGE *imdiff)
{
	size_t 
		index;

	int 
		return_value = 0;

	IMAGE_DATA_TYPE 

==> lconstlt.c <==
/* LCONSTLT.C - Create a constant lattice, using an input lattice as a
                template. 
   
   Author: Mike Wall
   Date: 8/5/95
   Version: 1.
   
   */

#include<mwmask.h>

int lconstlt(LAT3D *lat)
{
  size_t
    i,
    j,
    k,
    r,
    index = 0;
  

==> lconstrf.c <==
/* LCONSTRF.C - Create an rfile with the value of a constant given at the
		input line.
   
   Author: Mike Wall
   Date: 4/19/94
   Version: 1.
   
   */

#include<mwmask.h>

int lconstrf(DIFFIMAGE *imdiff)
{
	size_t
		radius;

	RFILE_DATA_TYPE
		rfile_value;

	int

==> lculllt.c <==
/* LCULLLT.C - Throw away part of a lattice.
   
   Author: Mike Wall
   Date: 4/26/95
   Version: 1.
   
   */

#include<mwmask.h>

int lculllt(LAT3D *lat)
{
  size_t
    *ct,
    i,
    j,
    k,
    r,
    index = 0;


==> lcutim.c <==
/* LCUTIM.C - "Cut" a rectangle out of an image by marking pixels 
     with ignore tags.
   
   Author: Mike Wall  
   Date: 1/13/95
   Version: 1.
   
   */

#include<mwmask.h>

int lcutim(DIFFIMAGE *imdiff)
{
	size_t 
		index = 0;

	RCCOORDS_DATA
		r,
		c;


==> ldf2im.c <==
/* LDF2IM.C - Generate an image based upon a diffuse features file.
                
   Author: Mike Wall  
   Date: 5/30/94
   Version: 1.0
   
*/

#include<mwmask.h>

int ldf2im(DIFFIMAGE *imdiff)
{
  size_t
    i,
    j,
    index;

  int
    return_value = 0;


==> ldfrflt.c <==
/* LDFRFLT.C - Calculate an R-factor rfile for two input lattices.
   
   Author: Mike Wall
   Date: 7/9/95
   Version: 1.
   
   */

#include<mwmask.h>

int ldfrflt(LAT3D *lat1, LAT3D *lat2)
{
  size_t
    *ct,
    i,
    j,
    k,
    r,
    index = 0;


==> ldfsqrlt.c <==
/* LDFSQRLT.C - Calculate the average difference squared voxel value
               vs.  radius between two input lattices in radial shells
   
   Author: Mike Wall
   Date: 3/15/95
   Version: 1.
   
   */

#include<mwmask.h>

int ldfsqrlt(LAT3D *lat1, LAT3D *lat2)
{
  size_t
    *ct,
    i,
    j,
    k,
    r,
    index = 0;

==> ldivlt.c <==
/* LDIVLT.C - Calculate the voxel-by-voxel quotient of two lattices.
   
   Author: Mike Wall
   Date: 4/11/95
   Version: 1.
   
   */

#include<mwmask.h>

int ldivlt(LAT3D *lat1, LAT3D *lat2)
{
  size_t
    i,
    j,
    k,
    index = 0;

  int
    return_value = 0;

==> ldivrf.c <==
/* LDIVRF.C - Divide one rfile by another.
   
   Author: Mike Wall
   Date: 4/19/94
   Version: 1.
   
   */

#include<mwmask.h>

int ldivrf(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	size_t
		radius;

	int
		return_value = 0;

  for(radius = 0; radius < imdiff1->rfile_length; radius++) {
    if (imdiff1->rfile[radius] != imdiff1->rfile_mask_tag) {

==> lexplt.c <==
/* LEXPLT.C - Multiply each voxel value in a lattice by an exponential,
             to correct for a Debye-Waller factor.
   
   Author: Mike Wall
   Date: 3/21/95
   Version: 1.
   
   */

#include<mwmask.h>

int lexplt(LAT3D *lat)
{
  size_t
    i,
    j,
    k,
    r,
    index = 0;


==> lfft.c <==
/* LFFT.C - Multi-dimensional fft routine copied from numerical
            recipes.

*/

#include <mwmask.h>

#define SWAP(a,b) tempr=(a);(a)=(b);(b)=tempr

void lfft(float *data,int *nn,int ndim,int isign)
{
	int i1,i2,i3,i2rev,i3rev,ip1,ip2,ip3,ifp1,ifp2;
	int ibit,idim,k1,k2,n,nprev,nrem,ntot;
	float tempi,tempr;
	double theta,wi,wpi,wpr,wr,wtemp;

	ntot=1;
	for (idim=1;idim<=ndim;idim++)
		ntot *= nn[idim];
	nprev=1;

==> lfreeim.c <==
/* LFREEIM.C - Free the allocated memory for a diffraction image.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lfreeim(DIFFIMAGE *imdiff)
{
  size_t
    i;
  int 
    return_value;
  
  /*
   * Free diffraction image:
   */

==> lfreelt.c <==
/* LFREELT.C - Free the allocated memory for a lattice.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lfreelt(LAT3D *lat)
{

  int return_value = 0;

  free((LATTICE_DATA_TYPE *)lat->lattice);
  free((LAT3D *)lat);
  free((RFILE_DATA_TYPE *)lat->rfile);

  return(return_value);

==> lgausslt.c <==
/* LGAUSSLT.C - Generate a gaussian lattice.
   
   Author: Mike Wall
   Date: 2/28/95
   Version: 1.
   
   */

#include<mwmask.h>

int lgausslt(LAT3D *lat)
{
  size_t
    lat_index = 0;
  
  int
    return_value = 0;

  struct ijkcoords 
    rvec,

==> lgensv.c <==
/* LGENSV.C - Generate a scattering vector for a pixel in an image,
              based on the pixel position and the crystal orientation
              matrix. 

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lgensv(DIFFIMAGE *imdiff)
{
  size_t
    index;
  
  float 
    spindle_rad,
    cs,

==> lgetanls.c <==
/* LGETANLS.C - Create an annular pixel mask.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lgetanls(DIFFIMAGE *imdiff)
{
   short l,
         m;
   long mod_sq,
        outer_sqr,
        inner_sqr,
        k = 0;

   outer_sqr = imdiff->mask_outer_radius*imdiff->mask_outer_radius;

==> lgetmat.c <==
/* LGETMAT.C - Extract the crystal orientation from a DENZO output
               file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <mwmask.h>

#define XPOS 45
#define XLEN 9

int lgetmat(DIFFIMAGE *imdiff)
{
  char *inline;

==> lgetovld.c <==
/* LGETOVLD.C - Generate a list of overload positions from an input TV6 tiff 
		file.

   Author: Mike Wall
   Date: 3/14/94
   Version: 1.0
   Description:
		Generate the list of overload pixels in the input diffraction
		image *imdiff, and write the list in a table in the input
		structure, imdiff->(*overload).
*/

#include <mwmask.h>

int lgetovld(DIFFIMAGE *imdiff)
{
	long 
		i=0,
		j=0;


==> lgetpks.c <==
/* LGETPKS.C - Extract the peak values from a DENZO output file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <mwmask.h>

#define XPOS 49
#define XLEN 7
#define YPOS 57
#define YLEN 7
#define DEFAULT_STOPSTRING " 999"

int lgetpks(DIFFIMAGE *imdiff)

==> linitim.c <==
/* LINITIM.C - Initialize a diffraction image.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

DIFFIMAGE *linitim(void)
{
  size_t
    i,
    num_read;
  
  DIFFIMAGE
    *imdiff;
  /*
   * Allocate memory:

==> linitlt.c <==
/* LINITLT.C - Initialize a lattice.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

LAT3D *linitlt(void) 
{

  LAT3D *lat;

  size_t
    index;
  
  lat = (LAT3D *)malloc(sizeof(LAT3D));
  if (!lat) {

==> lintdfim.c <==
/* LINTDFIM.C - Integrate diffuse features in a diffraction image and
                output to a file.
   
   Author: Mike Wall  
   Date: 5/28/94
   Version: 1.0
   
*/

#include<mwmask.h>

int lintdfim(DIFFIMAGE *imdiff)
{
  size_t
    i,
    j,
    index;

  long
    sum,

==> lmedim.c <==
/* LMEDIM.C - Remove the peaks from an image by median filtering using
              a specified mask size.
   
   Author: Mike Wall 
   Date: 4/8/95
   Version: 1.
   
   */

#include<mwmask.h>
int lmedim(DIFFIMAGE *imdiff) 
{
  
  RCCOORDS_DATA 
    half_height,
    half_width,
    n, 
    m, 
    r, 
    c; 

==> lmin.c <==
/* LMIN.C - Output the minimum of two numbers.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>
size_t lmin(size_t arg1, size_t arg2)
{
	size_t return_value;

  if (arg1 > arg2) {
    return_value = arg2;
  }
  else return_value = arg1;
  return(return_value);
}

==> lminr.c <==
/* LMINR.C - Generate a table of minimum voxel values as a function of radius
		for an input 3D lattice.
   
   Author: Mike Wall
   Date: 3/28/93
   Version: 1.
   
   */

#include<mwmask.h>

int lminr(LAT3D *lat)
{
	size_t
		i,
		j,
		k,
		r,
		index = 0;


==> lminrim.c <==
/* LMINRIM.C - Calculate the minimum intensity as a function of radius for an
		input image.
   
   Author: Mike Wall   
   Date: 4/4/93
   Version: 1.
   
   */

#include<mwmask.h>

int lminrim(DIFFIMAGE *imdiff)
{
	size_t
		radius,
		index = 0;

	RCCOORDS_DATA
		r,
		c;

==> lmodeim.c <==
/* LMODEIM.C - Remove the peaks from an image by mode filetering using
               a specified mask size.
   
   Author: Mike Wall 
   Date: 2/2/95
   Version: 1.
   
   "modeim <image in> <image out> <mask size> <bin size>"

   Input is ascii coordinates file.  Output is 16-bit 
   image of specified size (1024 x 1024 default).

   */

#include<mwmask.h>
int lmodeim(DIFFIMAGE *imdiff) 
{
  
  RCCOORDS_DATA 
    half_height,

==> lmulim.c <==
/* LMULIM.C - Calculate the pixel-by-pixel product of two images, storing 
		the result in the first image.

   Author: Mike Wall
   Version:1.0
   Date:4/27/94
			
	 Input argument is two diffraction images.  Output difference is
  stored in imdiff1->image.

*/

#include<mwmask.h>

int lmulim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	RCCOORDS_DATA
		r1,
		r2,
		c1,

==> lmullt.c <==
/* LMULLT.C - Calculate the voxel-by-voxel product of two lattices.
   
   Author: Mike Wall
   Date: 4/11/95
   Version: 1.
   
   */

#include<mwmask.h>

int lmullt(LAT3D *lat1, LAT3D *lat2)
{
  size_t
    i,
    j,
    k,
    index = 0;

  int
    return_value = 0;

==> lmulrf.c <==
/* LMULRF.C - Multiply two rfiles.
   
   Author: Mike Wall
   Date: 1/12/95
   Version: 1.
   
   */

#include<mwmask.h>

int lmulrf(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	size_t
		radius;

	int
		return_value = 0;

  for(radius = 0; radius < imdiff1->rfile_length; radius++) {
    if (imdiff1->rfile[radius] != imdiff1->rfile_mask_tag) {

==> lmulrfim.c <==
/* LMULRFIM - Multiply an image by an rfile -> image.
   
   Author: Mike Wall
   Date: 4/4/94
   Version: 1.
   
   */

#include<mwmask.h>

int lmulrfim(DIFFIMAGE *imdiff)
{
	size_t
		r,
		c,
		radius,
		index = 0;

	struct rccoords rvec;


==> lmulsclt.c <==
/* LMULSCLT.C - Multiply each voxel in a lattice by a scalar.
   
   Author: Mike Wall
   Date: 3/21/95
   Version: 1.
   
   */

#include<mwmask.h>

int lmulsclt(LAT3D *lat)
{
  size_t
    i,
    j,
    k,
    r,
    index = 0;
  
  for(k = 0; k < lat->zvoxels; k++) {

==> lnign.c <==
/* LNIGN.C - Calculate the number of ignored pixels vs radius for an
		input image.
   
   Author: Mike Wall   
   Date: 5/5/93
   Version: 1.
   
   */

#include<mwmask.h>

int lnign(DIFFIMAGE *imdiff)
{
	size_t
		r,
		c,
		*n,
		radius,
		index = 0;


==> lnoiseim.c <==
/* LNOISEIM - Create a noisy image.
   
   Author: Mike Wall
   Date: 4/10/95
   Version: 1.
   
   */

#include<mwmask.h>

int lnoiseim(DIFFIMAGE *imdiff)
{
  size_t 
    i,
    j,
    index = 0;
  
  int 
    return_value = 0;
  

==> lnormim.c <==
/* LNORMIM.C - Correct for solid-angle normalization and 
              detector-face rotation in a diffraction image.
   
   Author: Mike Wall
   Date: 2/24/95
   Version: 1.
   
   */

#include<mwmask.h>

int lnormim(DIFFIMAGE *imdiff)
{
  size_t 
    index = 0;
  
  RCCOORDS_DATA
    r,
    c;
  

==> lpeakim.c <==
/* LPEAKIM - Create an image with various size and strength peaks.
   
   Author: Mike Wall
   Date: 4/6/95
   Version: 1.
   
   */

#include<mwmask.h>

int lpeakim(DIFFIMAGE *imdiff)
{
  size_t
    i,
    j,
    index = 0;
  
  int 
    return_value = 0;
  

==> lpolarim.c <==
/* LPOLARIM.C - Perform polarization correction on a diffraction image.
   
   Author: Mike Wall
   Date: 4/26/94
   Version: 1.
   
   */

#include<mwmask.h>

int lpolarim(DIFFIMAGE *imdiff)
{
  size_t 
    index = 0;
  
  RCCOORDS_DATA
    r,
    c;
  
  struct xycoords

==> lpunch.c <==
/* LPUNCH.C - Mark all pixels inside a window in an image with an ignore tag.
   
   Author: Mike Wall  
   Date: 5/12/94
   Version: 1.
   
   */

#include<mwmask.h>

int lpunch(DIFFIMAGE *imdiff)
{
  long i;
  short
    lpunch_return,
    r,
    c;
  
  
  for (i=0; i<imdiff->mask_count; i++) {

==> lpunchim.c <==
/* LPUNCHIM.C - Mark all pixels inside a window in an image with an ignore tag.
   
   Author: Mike Wall  
   Date: 5/12/94
   Version: 1.
   
   */

#include<mwmask.h>

int lpunchim(DIFFIMAGE *imdiff)
{
	size_t 
		index = 0;

	RCCOORDS_DATA
		r,
		c;

	int 

==> lratioim.c <==
/* LRATIOIM.C - Calculate the scale and offset between two diffraction
		images as a function of radius.

   Author: Mike Wall
   Version:1.0
   Date:4/14/94
				 
	 Input argument is two diffraction images.  Output ratio is stored 
	 in imdiff2->imscaler.
*/

#include<mwmask.h>

int lratioim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	RFILE_DATA_TYPE
		*avg1,
		*avg2;

	int 

==> lreaddf.c <==
/* LREADDF.C - Read diffuse features from a file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lreaddf(DIFFIMAGE *imdiff)
{
  int
    r,
    c,
    average_value,
    return_value = 0;  
  
  char input_line[LINESIZE+1];
  

==> lreadim.c <==
/* LREADIM.C - Read a diffraction image from a file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lreadim(DIFFIMAGE *imdiff)
{
	size_t
		num_read;

	int
		return_value = 0;  
  /*
   * Read diffraction image header
   */

==> lreadlt.c <==
/* LREADLT.C - Read a lattice from a file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lreadlt(LAT3D *lat)
{

  size_t
    num_read;

  int
    return_value = 0;

  /*

==> lreadrf.c <==
/* LREADRF.C - Read an rfile from a file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lreadrf(DIFFIMAGE *imdiff)
{
	size_t
		i = 0,
		num_read;

	int
		return_value = 0;  

  while ((num_read = fread(&imdiff->rfile[i],sizeof(RFILE_DATA_TYPE), 1,

==> lrf2lt.c <==
/* LRF2LT.C - Generate a lattice from an rfile.
   
   Author: Mike Wall
   Date: 3/3/95
   Version: 1.
   
   */

#include<mwmask.h>

int lrf2lt(LAT3D *lat)
{
  size_t
    i,
    j,
    k,
    r,
    index = 0;

  int

==> lrmpkim.c <==
/* LRMPKIM.C - Remove peaks by replacing them with background pixel values..
   
   Author: Mike Wall
   Date: 5/13/93
   Version: 1.
   
   "rmpkim <input file> <image in> <image out> <hsize> <vsize>"

   Input is ascii coordinates file.  Output is 16-bit 
   image of specified size (1024 x 1024 default).

   */

#include<mwmask.h>

int lrmpkim(DIFFIMAGE *imdiff)
{
	int return_value = 0;
	long i,
		sum = 0,

==> lscaleim.c <==
/* LSCALEIM.C - Calculate the scale and offset between two diffraction
		images as a function of radius.

   Author: Mike Wall
   Version:1.0
   Date:4/7/94
				 
	 Input argument is two diffraction images.  Output scale and offset
	 are stored in imdiff2->imscaler and imdiff2->imoffsetr.
*/

#include<mwmask.h>

int lscaleim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	RFILE_DATA_TYPE
		*avg1,
		*avg2,
		*avg_sq1,
		*avg_sq2,

==> lscalelt.c <==
/* LSCALELT.C - Find the best scale factor relating two input lattices.
   
   Author: Mike Wall
   Date: 3/21/95
   Version: 1.
   
   */

#include<mwmask.h>

int lscalelt(LAT3D *lat1, LAT3D *lat2)
{
  size_t
    ct = 0,
    i,
    j,
    k,
    r,
    index = 0;


==> lshim4lt.c <==
/* LSHIM4LT.C - Generate an image of the full angular distribution of 
               intensity in a specified spherical shell of a lattice.
   
   Author: Mike Wall
   Date: 3/23/95
   Version: 1.
   
   */

#include<mwmask.h>

int lshim4lt(LAT3D *lat)
{
  size_t
    ct,
    ii,
    jj,
    kk,
    i,
    j,

==> lshimlt.c <==
/* LSHIMLT.C - Generate an image of a reduced angular distribution of
              intensity in a specified spherical shell of a lattice.
   
   Author: Mike Wall
   Date: 3/23/95
   Version: 1.
   
   */

#include<mwmask.h>

int lshimlt(LAT3D *lat)
{
  size_t
    ct,
    ii,
    jj,
    kk,
    i,
    j,

==> lsmthim.c <==
/* LSMTHIM.C - Smooth an image.
   
   Author: Mike Wall
   Date: 4/11/93
   Version: 1.
   
   */

#include<mwmask.h>
int lsmthim(DIFFIMAGE *imdiff) 
{

	WEIGHTS_DATA_TYPE
		*image,
		*weights_sum;

	RCCOORDS_DATA 
		half_height,
		half_width,
		n, 

==> lsolidlt.c <==
/* LSOLIDLT.C - Apply solid angle correction to lattice.
   
   Author: Mike Wall
   Date: 3/25/95
   Version: 1.
   
   */

#include<mwmask.h>

int lsolidlt(LAT3D *lat)
{
  size_t
    *ct,
    i,
    j,
    k,
    r,
    index = 0;


==> lsubim.c <==
/* LSUBIM.C - Calculate the difference between two images, stroing the result
		in the first image.

   Author: Mike Wall
   Version:1.0
   Date:4/18/94
			
	 Input argument is two diffraction images.  Output difference is
  stored in imdiff1->image.

*/

#include<mwmask.h>

int lsubim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	RCCOORDS_DATA
		r1,
		r2,
		c1,

==> lsublt.c <==
/* LSUBLT.C - Calculate the voxel-by-voxel difference of two lattices.
   
   Author: Mike Wall
   Date: 7/7/95
   Version: 1.
   
   */

#include<mwmask.h>

int lsublt(LAT3D *lat1, LAT3D *lat2)
{
  size_t
    i,
    j,
    k,
    index = 0;

  int
    return_value = 0;

==> lsubrf.c <==
/* LSUBRF.C - Subtract one rfile from another.
   
   Author: Mike Wall
   Date: 5/1/94
   Version: 1.
   
   */

#include<mwmask.h>

int lsubrf(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	size_t
		radius;

	int
		return_value = 0;

  for(radius = 0; radius < imdiff1->rfile_length; radius++) {
    if (imdiff1->rfile[radius] != imdiff1->rfile_mask_tag) {

==> lsubrfim.c <==
/* LSUBRFIM.C - Subtract I(r) from a diffraction image.
   
   Author: Mike Wall
   Date: 4/4/94
   Version: 1.
   
   */

#include<mwmask.h>

int lsubrfim(DIFFIMAGE *imdiff)
{
	size_t
		r,
		c,
		radius,
		index = 0;

	struct rccoords rvec;


==> lsubrflt.c <==
/* LSUBRFLT.C - Subtract a radial intensity distribution from each pixel
		in a 3D lattice.
   
   Author: Mike Wall
   Date: 3/28/93
   Version: 1.
   
   */

#include<mwmask.h>

int lsubrflt(LAT3D *lat)
{
  size_t
    i,
    j,
    k,
    r,
    index = 0;
  

==> lsumim.c <==
/* LSUMIM.C - Calculate the sum of two images, stroing the result
		in the first image.

   Author: Mike Wall
   Version:1.0
   Date:4/6/95
			
	 Input argument is two diffraction images.  Output sum is
  stored in imdiff1->image.

*/

#include<mwmask.h>

int lsumim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	RCCOORDS_DATA
		r1,
		r2,
		c1,

==> lsumlt.c <==
/* LSUMLT.C - Calculate the voxel-by-voxel sum of two lattices.
   
   Author: Mike Wall
   Date: 4/11/95
   Version: 1.
   
   */

#include<mwmask.h>

int lsumlt(LAT3D *lat1, LAT3D *lat2)
{
  size_t
    i,
    j,
    k,
    index = 0;

  int
    return_value = 0;

==> lsumrf.c <==
/* LSUMRF.C - Sum two rfiles.
   
   Author: Mike Wall
   Date: 4/19/94
   Version: 1.
   
   */

#include<mwmask.h>

int lsumrf(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	size_t
		radius;

	int
		return_value = 0;

  for(radius = 0; radius < imdiff1->rfile_length; radius++) {
    if (imdiff1->rfile[radius] != imdiff1->rfile_mask_tag) {

==> lsymlt.c <==
/* LSYMLT.C - Symmetrize a lattice according to input line instructions.
   
   Author: Mike Wall
   Date: 2/28/95
   Version: 1.
   
   */

#include<mwmask.h>

/*
 * Subtract two vectors:
 */

struct ijkcoords lijksub(struct ijkcoords vec1, struct ijkcoords vec2)
{
  struct ijkcoords return_value;
  
  return_value.i = vec1.i - vec2.i;
  return_value.j = vec1.j - vec2.j;

==> ltagim.c <==
/* LTAGIM.C - Tag pixels of a specified value with an ignore tag.
   
   Author: Mike Wall
   Date: 4/18/94
   Version: 1.
   
   */

#include<mwmask.h>

int ltagim(DIFFIMAGE *imdiff)
{
	size_t 
		index;

	int 
		return_value = 0;

  for(index=0; index < imdiff->image_length; index++) {
    if (imdiff->image[index] == imdiff->mask_tag) {

==> ltaglt.c <==
/* LTAGLT.C - Convert all voxels of specified value in a lattice to an 
             ignore_tag.
   
   Author: Mike Wall
   Date: 5/5/95
   Version: 1.
   
   */

#include<mwmask.h>

int ltaglt(LAT3D *lat)
{
  size_t
    i,
    j,
    k,
    r,
    index = 0;
  

==> lthrshim.c <==
/* LTHRSHIM.C - Set all pixels above and below given thresholds equal to an 
		ignore_tag.
   
   Author: Mike Wall
   Date: 5/13/94
   Version: 1.
   
   */

#include<mwmask.h>

int lthrshim(DIFFIMAGE *imdiff)
{
	size_t 
		index;

	int 
		return_value = 0;

  for(index=0; index < imdiff->image_length; index++) {

==> ltordata.c <==
/* LTORDATA.C - Generate a data structure which indexes pixels by radius
		rather than by (x,y).

   Author: Mike Wall
   Version:1.0
   Date:4/7/94
				 
	 Input argument is a diffraction image.  Output is stored in structure
		pointed to by pointer in diffraction image structure.
*/

#include<mwmask.h>

int ltordata(DIFFIMAGE *imdiff)
{
	RCCOORDS_DATA
		r,
		c;
	size_t
		bytes_allocated = 0,

==> lupdbd.c <==
/* LUPDBD.C - Update the current bounds of a lattice.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<stdio.h>
#include<stdlib.h>
#include<mwmask.h>

int lupdbd(LAT3D *lat)
{
	if (lat->map3D->pos.x > lat->xbound.max) lat->xbound.max = lat->map3D->pos.x;
	if (lat->map3D->pos.x < lat->xbound.min) lat->xbound.min = lat->map3D->pos.x;
	if (lat->map3D->pos.y > lat->ybound.max) lat->ybound.max = lat->map3D->pos.y;
	if (lat->map3D->pos.y < lat->ybound.min) lat->ybound.min = lat->map3D->pos.y;
	if (lat->map3D->pos.z > lat->zbound.max) lat->zbound.max = lat->map3D->pos.z;
	if (lat->map3D->pos.z < lat->zbound.min) lat->zbound.min = lat->map3D->pos.z;

==> lwaveim.c <==
/* LWAVEIM - Create an image with a fixed length scale fluctuation.
   
   Author: Mike Wall
   Date: 4/6/95
   Version: 1.
   
   */

#include<mwmask.h>

int lwaveim(DIFFIMAGE *imdiff)
{
  size_t 
    i,
    j,
    index = 0;
  
  int 
    return_value = 0;
  

==> lwindim.c <==
/* LWINDIM.C - Mark all pixels outside a window in an image with an ignore tag.
   
   Author: Mike Wall  
   Date: 4/25/94
   Version: 1.
   
   */

#include<mwmask.h>

int lwindim(DIFFIMAGE *imdiff)
{
	size_t 
		index = 0;

	RCCOORDS_DATA
		r,
		c;

	int 

==> lwritedf.c <==
/* LWRITEDF.C - Write a diffuse features file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lwritedf(DIFFIMAGE *imdiff)
{

  int
    return_value = 0;  
  
  size_t
    i,
    index;


==> lwriteim.c <==
/* LWRITEIM.C - Write a diffraction image to a file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lwriteim(DIFFIMAGE *imdiff)
{
	size_t
		num_wrote;

	int
		return_value = 0;  


/*

==> lwritelt.c <==
/* LWRITELT.C - Write a lattice to a file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lwritelt(LAT3D *lat)
{

  size_t
    num_wrote;

  int
    return_value = 0;

/*

==> lwriterf.c <==
/* LWRITERF.C - Write an rfile to a file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lwriterf(DIFFIMAGE *imdiff)
{
	size_t
		num_wrote;

	int
		return_value = 0;  


  num_wrote = fwrite(imdiff->rfile, sizeof(RFILE_DATA_TYPE),

==> lwritesh.c <==
/* LWRITESH.C - Write a shell image to a file.

   Author: Mike Wall
   Date: 9/27/95
   Version: 1.

*/

#include<mwmask.h>

int lwritesh(LAT3D *lat)
{

  size_t
    num_wrote;

  int
    return_value = 0;

/*

==> lxavgr.c <==
/* LXAVGR.C - Calculate the average pixel intensity product between two 
		images as a fuction of radius.

   Author: Mike Wall
   Version:1.0
   Date:4/7/94
				 
	 Input argument is two diffraction image.  Output is stored in rfile
	 of first image (imdiff1->rfile).
   Version:2.0
   Date:4/14/94

	 Use rdata indexing to calculate this, after it was discovered that
	    the old technique didn't work.
*/

#include<mwmask.h>

int lxavgr(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{

==> lxavgrim.c <==
/* LXAVGRIM.C - Calculate the average pixel intensity product between two 
		images as a fuction of radius

   Author: Mike Wall
   Version:1.0
   Date:4/7/94
				 
	 Input argument is two diffraction image.  Output is stored in rfile
	 of first image (imdiff1->rfile).
*/

#include<mwmask.h>

int lxavgrim(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	RCCOORDS_DATA
		r1,
		r2,
		c1,
		c2;

==> lxflt.c <==
/* LXFLT.C - Transform a lattice according to input line instructions.
   
   Author: Mike Wall
   Date: 3/24/95
   Version: 1.
   
   */

#include<mwmask.h>

int lxf1lt(LAT3D *lat)
{
  size_t
    ct,
    lat_index1 = 0,
    lat_index2 = 0;
  
  int
    return_value = 0;


==> lxfmask.c <==
/* LXFMASK.C - Mask pixels in a diffraction image which are masked in another
		image.

   Author: Mike Wall
   Version:1.0
   Date:4/11/94
				 
	 Input argument is two diffraction image.  Output is stored in 
	 first image. 
*/

#include<mwmask.h>

int lxfmask(DIFFIMAGE *imdiff1, DIFFIMAGE *imdiff2)
{
	size_t
		index2 = 0,
		index1 = 0;
	
	int 
